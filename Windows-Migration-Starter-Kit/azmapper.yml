#
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
AWSTemplateFormatVersion: 2010-09-09
Description: > 
  SK-Windows-Migration-Utility-AZMapper
  Creates an AZ Map which is required for various operability of Windows Migration Starter Kit and add-on kits. 
Resources:
# Lambda function invoker
  AzMapper: 
    Type: Custom::AzMapper
    Properties: 
      ServiceToken: !GetAtt AzMapperLambdaFunction.Arn 
# Lambda function role
  AzMapperLambdaExecutionRole:
    Metadata:
      checkov:
        skip:
          - id: "CKV_AWS_108"
            comment: "This action does not support resource-level permissions. Policies granting access must specify * in the resource element."
          - id: "CKV_AWS_111"
            comment: "This action does not support resource-level permissions. Policies granting access must specify * in the resource element."
      cfn_nag: 
        rules_to_suppress: 
          - id: W11
            reason: "This action does not support resource-level permissions. Policies granting access must specify * in the resource element."
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ssm:DescribeParameters
                  - ssm:GetParameter
                  - ssm:PutParameter
                  - ssm:DeleteParameter
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:DescribeAvailabilityZones
                Resource: "*"
  # Log Group
  AzmapperLogGroup: 
    Type: AWS::Logs::LogGroup 
    Properties: 
      RetentionInDays: 30
      Tags: 
        - Key: AWS-Starter-Kit-Name
          Value: Windows-Migration-Stater-Kit
  # Lambda function
  AzMapperLambdaFunction:
    Metadata:
      checkov:
        skip: 
          - id: "CKV_AWS_115"
            comment: "This Lambda function will be run only once at creation."
          - id: "CKV_AWS_116"
            comment: "SNS Topic configured after - this function only serves to create an AZ Map necessary to creating a stack"
          - id: "CKV_AWS_117"
            comment: "VPC creation is dependent on this function."
          - id: "CKV_AWS_173"
            comment: "Function uses default service key."
      cfn_nag:
        rules_to_suppress: 
          - id: W77
            reason: "This Lambda function will be run only once at creation."
          - id: W89
            reason: "VPC creation is dependent on this Lambda function"
          - id: W92
            reason: "This Lambda functions runs only once at creation"
    Type: AWS::Lambda::Function
    Properties:
      Description: This function creates an AZ Map so that the correct availability zones can be chosen in the Windows Migration Template. Do Not delete this function from here, instead delete from CloudFormation.
      FunctionName: azmapper-lambda-function
      Runtime: python3.11
      Timeout: 15
      Environment: 
        Variables: 
          selectedRegion: 
            Fn::Sub: "${AWS::Region}" 
      Role: !GetAtt AzMapperLambdaExecutionRole.Arn
      LoggingConfig: 
        ApplicationLogLevel: INFO
        LogFormat: JSON 
        LogGroup: !Ref AzmapperLogGroup
        SystemLogLevel: INFO
      Handler: index.lambda_handler
      Code: 
        ZipFile: |
          import os
          import random
          import boto3
          import cfnresponse 

          selected_region = os.environ['selectedRegion']

          """This python script is part of azmapper.yml - a cloudformation template which deploys a CloudFormation custom resource via this script.
          The AZ Mapper maps AZ ID's to AZ Names so that the correct AZ's are chosen for the WIndows Migration Starter Kit stack deployment. Without this,
          there are no checks to make sure that WorkSpaces can be added without any issues (WorkSpaces is only available in specific region/AZ pairs)"""

          def lambda_handler(event, context):
              try: 
                  """Lambda Handler Function for CRUD Operations"""
                  if event['RequestType'] == 'Create':
                      response_data = create_parameters(selected_region)
                      print(response_data)
                  elif event['RequestType'] == 'Update':
                      response_data = {'NOT_PERMITTED': 'UPDATE NOT PERMITTED'}
                      print(response_data)
                      cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
                  elif event['RequestType'] == 'Delete':
                      response_data = delete_parameters()
                      print(response_data)
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)

              except Exception as e:
                  print(e)
                  response_data = e
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data)

          def create_parameters(selected_region):
              """This function creates the SSM paramaters for AZ Mappings for Regions with WorkSpaces AZ restrictions ONLY. While we map out all AZ's, the build logic is in the CloudFormation resource."""
              try:
                  num_azs = 2 # CHANGE THIS VALUE IF YOU WANT A DIFFERENT NUMBER OF AZ'S IN YOUR REGION; DEFAULT IS 2
                  """These are the Available AZ's for each region to use with Workspaces, based on the region you deploy the template in. This has to be kept updated based on Workspaces releases"""
                  print(f'Checking {selected_region} for workspace restrictions')
                  if selected_region == "us-east-1": 
                      ws_az_ids = ["use1-az2","use1-az4","use1-az6"]
                      azlist = random.sample(ws_az_ids, num_azs)
                  elif selected_region == "us-west-2":
                      ws_az_ids = ["usw2-az1","usw2-az2","usw2-az3"]
                      azlist = random.sample(ws_az_ids, num_azs)
                  elif selected_region == "ap-northeast-2":
                      ws_az_ids = ["apne2-az1","apne2-az3"]
                      azlist = random.sample(ws_az_ids, num_azs)
                  elif selected_region == "ap-southeast-1":
                      ws_az_ids = ["apse1-az1","apse1-az2"]
                      azlist = random.sample(ws_az_ids, num_azs)
                  elif selected_region == "ap-southeast-2":
                      ws_az_ids = ["apse2-az1","apse2-az3"]
                      azlist = random.sample(ws_az_ids, num_azs)
                  elif selected_region == "ap-northeast-1":
                      ws_az_ids = ["apne1-az1","apne1-az4"]
                      azlist = random.sample(ws_az_ids, num_azs)
                  elif selected_region == "ca-central-1":
                      ws_az_ids = ["cac1-az1","cac1-az2"]
                      azlist = random.sample(ws_az_ids, num_azs)
                  elif selected_region == "eu-central-1":
                      ws_az_ids = ["euc1-az2","euc1-az3"]
                      azlist = random.sample(ws_az_ids, num_azs)
                  elif selected_region == "eu-west-2":
                      ws_az_ids = ["euw2-az2","euw2-az3"]
                      azlist = random.sample(ws_az_ids, num_azs)
                  elif selected_region == "sa-east-1":
                      ws_az_ids = ["sae1-az1","sae1-az3"]
                      azlist = random.sample(ws_az_ids, num_azs)
                  else:
                      print("Selected Region is "+selected_region)
                      print ("Not deploying in a Workspace Region with restricted AZs")
                      response_data = {'SUCCESS': 'NOT_WS_RESTRICTED_REGION'}
                      return response_data

                  response_data={}
                  n=0
                  for azId in azlist: 
                      ec2client = boto3.client('ec2')
                      ec2_response = ec2client.describe_availability_zones(
                          Filters=[
                              {
                                  'Name': 'zone-id',
                                  'Values': [azId]
                              }
                          ]
                      )
                      print("Creating new paramter")
                      for i in ec2_response['AvailabilityZones']:
                          n=n+1
                          azId = i['ZoneId']
                          azName = i['ZoneName']
                          ssmclient = boto3.client('ssm') 
                          param_name = f'azmap-az{n}'
                          ssm_put_response = ssmclient.put_parameter(
                              Name=param_name,
                              Type='String',
                              Value=azName,
                              Overwrite=True,
                              Tier='Standard'
                          )
                          if ssm_put_response['ResponseMetadata']['HTTPStatusCode'] == 200:
                              print(f'Successfully added parameter {param_name}')
                              response_data[param_name]='CREATED'
                  return response_data

              except Exception as e:
                  response_data = e
                  print(e)
                  return response_data

          def delete_parameters(): 
              """This function deletes the SSM parameters for AZ Mappings."""
              try: 
                  print("Checking Parameter Store for AZ Parameters")
                  ssmclient = boto3.client('ssm')
                  response_data = {}
                  ssm_response = ssmclient.describe_parameters(
                      Filters=[
                          {
                              'Key': 'Name',
                              'Values': ['azmap']
                          }
                      ]
                  )
                  for i in ssm_response['Parameters']:
                      param_name = i['Name']
                      print(f'Deleting parameter {param_name}')
                      del_response = ssmclient.delete_parameter(
                          Name=param_name
                      )
                      if del_response['ResponseMetadata']['HTTPStatusCode'] == 200:
                          print(f'Successfully deleted parameter {param_name}')
                          response_data[param_name]='DELETED'
                  return response_data

              except Exception as e:
                  print(e)
                  response_data = e
                  return response_data
